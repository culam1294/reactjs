{"version":3,"sources":["api/api.js","api/ApiCaller.js","container/ManagerProducts/index.jsx","App.js","action/isLogin.js","action/Couter.js","serviceWorker.js","reducers/Counter.js","reducers/isLogin.js","reducers/index.js","index.jsx"],"names":["api","callapi","method","endpoint","item","axios","url","data","columns","title","dataIndex","key","render","product","style","color","cost","stock","type","size","ManagerProducts","useState","setData","isLoad","setIsLoad","useEffect","a","callApi","then","res","fetchData","loading","dataSource","labelCol","span","wrapperCol","layout","Item","placeholder","Option","value","App","counter","useSelector","state","count","login","dispatch","useDispatch","className","onClick","Boolean","window","location","hostname","match","action","joinReducers","combineReducers","Counter","Login","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a63dbb6f.chunk.js","sourcesContent":["\nconst api = \"http://5e85807044467600161c6466.mockapi.io\";\n\nexport default api;\n","import axios from \"axios\";\nimport api from \"./api\";\n\nexport default function callapi(method = \"GET\", endpoint, item) {\n  return axios({\n    method: method,\n    url: `${api}/${endpoint}`,\n    data: item,\n  });\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport {\n  Table,\n  Tag,\n  Button,\n  Form,\n  Input,\n  Select,\n  DatePicker,\n  InputNumber,\n} from \"antd\";\nimport callApi from \"../../api/ApiCaller\";\n\nconst columns = [\n  {\n    title: \"Product\",\n    dataIndex: \"product\",\n    key: \"product\",\n    render: (product) => <p style={{ color: \"#0000bb\" }}>{product}</p>,\n  },\n  {\n    title: \"Cost\",\n    dataIndex: \"cost\",\n    key: \"cost\",\n    render: (cost) => cost + \"$\",\n  },\n  {\n    title: \"Description\",\n    dataIndex: \"description\",\n    key: \"description\",\n  },\n  {\n    title: \"JoinDay\",\n    dataIndex: \"joinday\",\n    key: \"joinday\",\n  },\n  {\n    title: \"Stock\",\n    key: \"stock\",\n    dataIndex: \"stock\",\n    render: (stock) =>\n      stock ? (\n        <Tag color=\"green\">In Stock</Tag>\n      ) : (\n        <Tag color=\"red\">Out Stock</Tag>\n      ),\n  },\n  {\n    title: \"Action\",\n    key: \"action\",\n    render: () => (\n      <span>\n        <Button type=\"primary\" size=\"small\">\n          Edit\n        </Button>\n        <Button type=\"danger\" size=\"small\">\n          Delete\n        </Button>\n      </span>\n    ),\n  },\n];\n\nexport default function ManagerProducts() {\n  const [data, setData] = useState();\n  const [isLoad, setIsLoad] = useState(true);  \n\n  useEffect(() => {\n    async function fetchData() {\n      await callApi(\"get\", \"products\", null).then((res) => setData(res.data));\n      setIsLoad(false);\n    }\n    fetchData();\n  }, []);\n  return (\n    <div>\n      <Table loading={isLoad} columns={columns} dataSource={data} />\n\n      <Form labelCol={{ span: 4 }} wrapperCol={{ span: 40 }} layout=\"inline\">\n        <Form.Item>\n          <Input  placeholder=\"Product\" />\n        </Form.Item>\n        <Form.Item>\n          <InputNumber placeholder=\"Cost\" />\n        </Form.Item>\n        <Form.Item>\n          <Input placeholder=\"Description\" />\n        </Form.Item>\n        <Form.Item>\n          <Select placeholder=\"Stock\">\n            <Select.Option value=\"In Stock\">In Stock</Select.Option>\n            <Select.Option value=\"Out Stock\">Out Stock</Select.Option>\n          </Select>\n        </Form.Item>\n        <Form.Item>\n          <DatePicker placeholder=\"JoinDay\" />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\">Add</Button>\n        </Form.Item>\n\n      </Form>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { increment, decrement } from \"./action/Couter\";\nimport { isLogin } from \"./action/isLogin\";\nimport ManagerUsers from \"./container/ManagerProducts/index\";\n\nfunction App() {\n  const counter = useSelector((state) => state.count);\n  const login = useSelector((state) => state.login);\n  \n\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"App\">\n      {login ? (\n        <button onClick={() => dispatch(isLogin())}>login</button>\n      ) : (\n        <button onClick={() => dispatch(isLogin())}>logout</button>\n      )}\n      <br />\n      <button onClick={() => dispatch(increment())}>increment</button>\n      My counter is {counter}\n      <button onClick={() => dispatch(decrement())}>decrement</button>\n      <ManagerUsers/>\n    </div>\n  );\n}\n\nexport default App;\n","export const isLogin =()=>{\n    return {\n        type: 'LOGIN'\n    }\n}","export const increment =()=>{\n    return {\n        type: 'INCREMENT'\n    }\n}\nexport const decrement =()=>{\n    return {\n        type: 'DECREMENT'\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const counter = (state = 0, action) => {\n    switch(action.type){\n        case 'INCREMENT':\n            return state + 1;\n        case 'DECREMENT':\n            return state - 1;\n        default : \n        return state;\n    }\n}\nexport default counter;","const login = (state = false, action) => {\n  switch (action.type) {\n    case 'LOGIN':\n      return !state;\n    default:\n      return state;\n  }\n};\nexport default login;\n","import { combineReducers } from 'redux';\nimport Counter from './Counter';\nimport Login from './isLogin';\n\nconst joinReducers = combineReducers({\n    count : Counter,\n    login : Login\n});\nexport default joinReducers;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport joinReducers from './reducers';\n\nconst store = createStore(joinReducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n  ,document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}